{"./":{"url":"./","title":"简介","keywords":"","body":"简介 ​ 本手册基于Gitbook版本2.3.2，主要就Gitbook的安装、配置、插件、主题等进行介绍与说明。 ​ 由于本人在Gitbook上是初学，故多会参考或翻译官方文档以及网上一些内容。由于本人水平有限，如翻译或引用不正确，请多包涵！ ​ Gitbook主页 ​ Gitbook在Github的地址 ​ Gitbook Toolchain Documentation ​ © 2019 Dastone Deng . All rights reserved.本站访客数 人次"},"Install/":{"url":"Install/","title":"安装","keywords":"","body":"安装 ​ Gitbook的安装还是比较简单的，本文的介绍都是基于本地安装Gitbook,但如果官网提供的服务已经满足了您的需求，则可忽略本文档。由于本人使用的window系统，以下介绍也是基于window系统介绍的。 本地安装 系统要求 安装Gitbook很容易，但是系统必须满足如下要求： NodeJS(建议v4.00或以上) Gitbook可安装在Windows,Linux,Unix或者Mac OS X上。 通过NPM安装 最方便的就是通过NPM来安装Gitbook。在系统终端的提示符下，只需要简单的输入如下命令就可以安装Gitbook。 c:\\>npm install gitbook-cli -g gitbook-cli是一个可在同一个操作系统下安装和使用多个Gitbook的应用。它能自动安装Gitbook的最合适版本来编译书籍。 由于使用windows系统，安装完成以后却无法使用gitbook命令，后来查资料才搞明白，设置好路径就可以了。一般安装了gitbook-cli后，在C:\\使用者\\用户登录名\\.gitbook下的versions目录下会有对应版本的gitbook。在npm命令中使用参数-g，则表明将gitbook-cli全局安装到Node对应的路径下。该路径为C:\\使用者\\用户登录名\\.nodejs\\node_global；在该路径下应该可发现gitbook命令，如发现则证明安装正确了，将该路径加入到系统路径即可。设置好后在系统终端就可以使用gitbook命令了。 © 2019 Dastone Deng . All rights reserved.本站访客数 人次"},"Command/":{"url":"Command/","title":"命令","keywords":"","body":"命令 这里介绍下gitbook的几个常用命令。 初始化init gitbook init命令可初始化书籍目录。 在使用这个命令时，首先需要新建立一个目录，然后在这个目录下新增加README.md与SUMMARY.md；如新建目录为book,则该目录结构为： c:\\>tree book /f README.md SUMMARY.md 其中README.md是对本书籍的介绍，这个是必须文件。 SUMMARY.md是本书籍的目录结构。比如内容为： # Summary * [Introduction](README.md) * [第一章](chapter1/README.md) * [第一节](chapter1/section1.1.md) * [第二节](chapter1/section1.2.md) * [第二章](chapter2/README.md) 以上为示例。大家可根据自己实际需要来编写目录； 编号目录后再系统终端的命令提示符下，输入命令： c:\\>book\\gitbook init 命令完成后，你会发现按你所编写的目录结构生成了初始的文件，只需要按每个文件编写内容即可了。 预览serve 如你编写好了内容要预览的话，可使用如下命令： c:\\>book\\gitbook serve 该命令成功以后，则可以在本地浏览器通过http://localhost:4000 来查看gitbook运行的效果了。 生成build 如编写好书籍后，可通过build命令来生成静态网页： c:\\book\\gitbook build 通过build命令后，会发现在book目录下会有一个新的目录_book，所有静态网页的内容都在这个目录下，可将这个目录的所有内容放在服务器上运行。其实在运行serve命令时就会首先运行build命令来生成静态网页，然后serve自行打开一个web服务器并通过监控4000端口来发布静态网页。 其它命令 注意的是gitbook-cli和gitbook是2个不同软件，gitbook-cli会将gitbook不同版本下载到C:\\使用者\\用户登录名\\.gitbook中，但可通过设置GITBOOK_DIR环境变量来指定不同的文件夹。 gitbook-cli的帮助信息 c:\\>gitbook --help 列出gitbook所有能用的命令 c:\\>gitbook help 指定版本 GItbook CLI会使用缺省的最新Gitbook版本，但你也可以通过参数--gitbook来指定版本，如： c:\\>gitbook build ./book --gitbook=2.0.1 可列出指定版本可用的命令： c:\\>gitbook help --gitbook=2.0.1 版本管理 列出所有版本 c:\\>gitbook ls 列出NPM上可用的版本 c:\\>gitbook ls-remote 安装指定版本 c:\\>gitbook fetch 2.1.0 # 或者前一个版本 c:\\>gitbook fetch beta 更新到最新版本 c:\\>gitbook update 卸载指定版本 c:\\>gitbook uninstall 2.0.1 使用本地文件夹做GitBook的版本(用于开发) c:\\>gitbook alias ./mygitbook latest 调试 可使用参数选项--log=debug 和--debug来得到各详细错误信息，以便能进行排错；如： c:\\>gitbook build ./ --log=debug --debug © 2019 Dastone Deng . All rights reserved.本站访客数 人次"},"Setup/":{"url":"Setup/","title":"配置","keywords":"","body":"配置 其实Gitbook是零配置的。如果不想做出其他效果，那么就可以不进行任何配置。 如要进行配置的话，那么需要自己建立一个book.json文件在书籍目录下。 先了解下book.json的基本配置吧。 基本配置 变量 描述 root 包含书籍所有文件的根文件夹 structure 指定README,SUMMARY,GLOSSARY等的路径 title 书籍的标题，缺省值从README获取 decription 书籍的描述，缺省值从README获取 author 书籍的作者 isbn 书籍的ISBN language 书籍的语言，缺省为en direction 文字的排版方向。可以为rtl或ltr,缺省值因爱language的设定 gitbook Gitbook将使用的版本，可指定版本或接受如“>=3.0.0”的条件 插件Plugins 插件以及其配置都是指定在book.json中。从3.0.0版本以后，Gitbook可使用主题。 变量 描述 plugins 要加载的插件列表 pluginsConfig 插件的配置 Structure 除了root变量外，可为gitbook指定README,SUMMARY,GLOSSARY,LANGUAGES等文件的名称，比如README使用缺省名称为README.md。这些文件将放在书籍的根目录(或者放在不同语言的根目录下)。形如dir/MY_README.md的路径是不接受的。 变量 描述 structure.readme Readme文件的名称，缺省README.md structure.summary Summary文件的名称，缺省SUMMARY.md structure.glossary Glossary文件的名称，缺省GLOSSARY.md structure.languages Languages文件的名称，缺省为LANGS.md PDF选项 PDF的输出可在book.json中配置，支持的参数如下： 变量 描述 pdf.pageNumbers 在每页的底部增加页码数，缺省为true pdf.fontSize 设置字体大小，缺省为12 pdf.fontFamily 设置字体，缺省为Arial pdf.paperSize 设置纸张大小，可选为'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'legal', 'letter'，缺省为a4 pdf.margin.top 页眉，缺省为56 pdf.margin.bottom 页尾，缺省为56 pdf.margin.right 右边距，缺省为62 pdf.margin.left 左边距，缺省为62 © 2019 Dastone Deng . All rights reserved.本站访客数 人次"},"Plugin/":{"url":"Plugin/","title":"插件","keywords":"","body":"插件 插件是扩展Gitbook功能(电子书和网站)的最佳方式。现有的插件功能繁多：可支持数学公司，谷歌分析等。 怎么找插件呢？ 可以在plugins.gitbook.com查找或者在NPM或者Github上找插件。 Gitbook的插件在NPM上都是以gitbook-plugin开头的，很容易查找的。 插件的安装和配置 插件安装很简单，只需要在book.json的plugins中增加相应插件就可以了。配置则需要根据不同插件来分别对待，但都是保存在pluginsConfig下的。 下面就常用的几款插件进行简单介绍下。 Disqus Disqus是个非常流行的网站继承评论系统工具。Gitbook添加了该插件，则可以让读者在网页下面进行评论。 要使用该插件，则在book.json中增加如下代码。 { \"plugins\": [\"disqus\"], \"pluginsConfig\": { \"disqus\": { \"shortName\": \"XXXXXXX\" } } } 代码中的shortName是在disqus官网上创建的website获得的唯一关键字。 但是如果某一个页面不想使用disqus的话，则可在页面中指定，如下代码。 --- disqus: false --- # My Page without disqus 这里再说下shortName，希望大家能明白。 在disqus官网先注册一个账号，或者通过google,twitter,facebook账号授权注册都行。注册完了在Account页面可以看到Username，这个Username就是需要填写的shortName。 是不是这样就OK了呢？肯定不行，这是页面加载不上Disqus，为啥呢？需要你为你的网页增加一个site，登录后点击Admin，进入到管理页面。在管理页面选择Installing Disqus；然后在这个页面选择Create a Site，按要求填写后就可以管理你的Site了，在Site的设置页面填写好Website Name以及Website URL就可以了。注意的是Website URL是你访问的域名，比如.github.io。 设置好了，再次编译，发布以后就可以正常看到Disqus了。 books 这个是国人写的一个综合插件，是\"为了节约空间而写的一个插件\"。 books插件地址 由于该地址有详细介绍，我这里不在赘述了。 插件太多，只有选择自己合适的才是最好的。 可参考如下网址的插件介绍。 Gitbook插件 © 2019 Dastone Deng . All rights reserved.本站访客数 人次"},"Theme/":{"url":"Theme/","title":"主题","keywords":"","body":"主题 从版本3.0.0以后，Gitbook能定制主题了。缺省书籍使用了theme-default主题。 主题的结构 其实主题也是一个插件，但它包含了模板和资源。任意主题都是继承自缺省主题，但可选覆盖任何主题模板。 目录 描述 _layouts 包含了所有模板的主目录 _layouts/website/page.html 单一页面模板 _layouts/ebook/page.html 在ebook生成时用到的单一页面模板(PDF 扩展/定制主题 作者可通过书籍的源代码直接扩展主题的模板(不需要另外创建主题)。模板首先会在数据的_layouts文件夹中解析，然后在安装插件/主题。 主题插件 Gitbook缺省的主题一般都够用了。除了用户可自行扩展主题外，还可通过NPM搜索主题插件。在NPM上，gitbook的主题插件一般都是以gitbook-theme开头的。 下面介绍几种常用主题插件。 theme-default 这个是缺省插件。这里将showLevel设为true，这样就会显示标题前面的数字索引，默认是不显示的。 { \"theme-default\": { \"showLevel\": true } } theme-comscore comscore可以为标题增加颜色，而缺省主题都是黑白色的。 插件地址 要使用该插件，只需要将如下代码加入到book.json中。 { \"plugins\": [ \"theme-comscore\" ] } © 2019 Dastone Deng . All rights reserved.本站访客数 人次"},"Publish/":{"url":"Publish/","title":"发布","keywords":"","body":"发布 这里介绍是将书籍发布到Github Pages。如需要了解Github Pages，请参考Github Pages主页。 为了将书籍构建好后放在Github Pages中，需要在本地构建出site格式。这样，就可以通过如下地址进行访问了： .github.io/ 发布到gh-pages分支 首先需要先安装gh-pages。在系统终端输入如下命令： c:\\>npm i gh-pages -g 这时在系统终端可输入gh-pages命令了，如要查看怎么使用，可在终端输入如下命令： c:\\>gh-pages --help 如已经通过gitbook build命令构建书籍了，则会在目录下有个_book子目录，该目录就是本书籍的静态网页了。通过gh-pages发布到Github就可以了。在终端输入如下命令: c:\\>gh-pages -d _book 如发布成功后，则会发现在github的书籍项目中除了master分支多了一个gh-pages分支了。这是就需要明白这2个分支的作用。 master分支：保存书籍的源码 gh-pages分支：保存书籍编译以后的静态网页 上传源码到master分支 好了，现在我们需要将源码都上传到master分支。 首先，我们必须在书籍目录下建立文件.gitignore，不需要上传的文件忽略掉；文件.gitignore的内容如下代码。 *~ _book node_modules 然后将目录下除了.gitignore忽略的文件都上传到master分支。 c:\\>book\\git add. c:\\>book\\git commit -m \"add source\" c:\\>book\\git push -u origin master 好了。我们可以通过\\.github.io/\\来访问本书籍了。 © 2019 Dastone Deng . All rights reserved.本站访客数 人次"}}